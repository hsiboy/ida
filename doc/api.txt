The API

You only need to know 3 function calls to get started:
#include <idsa.h> 
IDSA_CONNECTION *idsa_open(char *name, char *credential, int flags); 
int idsa_set(IDSA_CONNECTION * c, char *n, char *s, int f, unsigned ar, unsigned cr, unsigned ir, ...); 
int idsa_close(IDSA_CONNECTION *c);
idsa_open is used to set up all the state information to use the idsa system and should be invoked before all other idsa calls, while idsa_close frees the resources held by idsa. idsa_open takes three arguments, the application or service name which should identify your application, a credential which can be set to NULL and a set of flags which are documented in the manual pages. idsa_open returns a handle which will be used by subsequent idsa calls and invalidated by idsa_close.
idsa_set is the function which is used by the application programmer to report an event. It takes a variable number of arguments, 7 required ones, 3n optional ones and a NULL to terminate the argument list.
c is the handle previously returned by idsa_open, n is the event name, s the event scheme or namespace. Together n and s identify an event. The event scheme is used to group events, for example the author of an irc client might want to create an irc namespace for irc related events. At the moment there are no prescriptive event schemas, the plan is that the first application in a particular domain sets up a schema, and subsequent applications try to follow or extend it. It is all rather informal, at least for the time being.
f is a flag which the application should use to tell idsa if it intends to honour requests to deny an event. Some events, for example a disk failure, can not be disallowed. For those events the flag should set to 0, otherwise it should be 1.
ar, cr and ir are event risk ratings, expressed as potential damage to availability, confidentiality and integrity. They are composed of a cost in the range -1.0 to 1.0 (where a negative cost expresses an improvement) and a confidence value, range 0.0 to 1.0. idsa.h contains a number of predefined risks, for example IDSA_R_TOTAL which tells idsa that the application is reporting a worst failure with a 99% percent confidence.
To define your own risk ratings use idsa_risk_make, for example idsa_risk_make(0.0,0.0) indicates that the event has no risk, but there is zero confidence in that assessment, in other words the risk associated with this event is unknown.
Note that risks are local to your application - if your finger daemon is about to crash completely, you should report a total availability failure even if the rest of the machine continues running happily.
The risk ratings are supposed to help an administrator make high-level policy decisions without needing to know application specific information - for example, a high security installation might only want to allow low risk operations - if the author of an ftp daemon has labelled requests such as SITE or DELE as high risk, then they would be disabled without the sysadmin having to block them on an individual basis.
After the required arguments you can specify a number of optional data fields. Each consists out of three arguments - the field name, its type and a pointer to its value. Consult idsa.h for a list of types.
The last argument to idsa_set has to be NULL.
The above functions are also documented in manual pages included with the idsa archive.
Simple Example


IDSA_CONNECTION *c;
int result;

/* connect to idsad as test-service, no credential and no flags */
c = idsa_open("test-service", NULL, 0);

if (c==NULL) {
  exit(1);
}

/* report test-event in test-scheme namespace with unknown risks */
result = idsa_set(c, "test-event", "test-scheme", 1, IDSA_R_UNKNOWN, IDSA_R_UNKNOWN, IDSA_R_UNKNOWN, "test-option", IDSA_T_STRING, "test-option-value",  NULL);

/* check if event is allowed or denied */
if (result == IDSA_L_ALLOW) {
  /* Do whatever */
} else {
  /* Don't */
}

idsa_close(c);

Below is a log entry (in ulm format) generated by this event:
pid="688" uid="503" gid="503" time="997023543" service="test-service" host="www.example.com" name="test-event" scheme="test-scheme" honour="1" arisk="0.000/0.000" crisk="0.000/0.000" irisk="0.000/0.000" test-option="test-option-value"
