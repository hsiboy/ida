Advanced Logging

Idsa implements an advanced and secure logging system, so even if you don't want to use idsa as IDS or reference monitor you may still find it useful as an improved system logger to replace the conventional unix syslogd. The idsa package includes a dropin replacement idsasyslogd.
Idsa implements the following advanced features:
Accurate reporting of time, pid, uid and gid: Idsa will ensure that these fields are accurate. This differs from the conventional syslogd which trusts the applications to report these fields correctly. This is important if you run a system with untrusted local users, as logs recorded by the conventional syslog are forensically unsound in such environments: It is trivial for local users to spoof log entries and anybody who is implicated by these logs may (validly) claim to have been framed. See this article for more detail.
Log quotas and log rotation: Idsa can maintain separate log files for different user classes, and optionally rotate files when they have exceeded a certain size. For example, it is possible to have a separate log file for root, and rotate logs generated by other users so that they can not attempt a denial of service on disk space. This is all done within idsad without inefficient cron jobs or syslog restarts - the latter may leave windows where no logging at all takes place.
Structured log records: Log entries have structure, unlike conventional syslog messages which are strings without structure. Parsing unstructured strings is difficult, error prone and may not always be unambiguous. For example, some system loggers won't distinguish between a newline character and its escape sequence. Suggestions to add structure to syslog events can be found in this paper by Matt Bishop and were pursued by GULP.
Multiple output formats: Idsa supports multiple output formats, including xml, syslog and user defined log strings.
Arbitrary filtering criteria: Events may be filtered on any of their fields. Apart from an internal filtering language, events may also be filtered by external programs (for example a scheme interpreter) or by custom modules which use the plugin API.
Client side event filtering and logging: In cases where it is too expensive to consult a log server process, idsa provides the option to upload filtering instructions into the client process space, either to select only relevant information, or to perform completely autonomous logging.
