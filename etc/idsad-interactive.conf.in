#################################################################################
#
# The rules in this file make it possible to do *interactive* access
# control, analogous to the work of human security guards at airports 
# or military installations.
#
# Putting a human into the loop slows things down a bit, but for small 
# personal systems or high security environments the gains should 
# outweigh this disadvantage.
#
# To use this ruleset run 
#
#   idsad -f idsad-interactive.conf
# and then
#   idsaguardtty /root/tcp_approve 
#   idsaguardgtk /root/pam_approve 
#
# Rules 1-3 apply to services using tcpwrappers, rules 4-6 to PAM. 
#
#################################################################################

#################################################################################
# Test rule 0 - To check type 
#
# idsaguardtty /root/test_approve & while true ; do idsalog -s test ; sleep 1 ; done
# 
service test & ! %interactive /root/test_approve 5 failopen: deny

#################################################################################
# TCP wrapper rules 1-3. Edit /etc/inetd.conf or /etc/xinet.d/* 
# to insert calls to idsatcpd in place of tcpd

# rule 1: On weekdays allow access to hosts on our whitelist, no questions asked.
#         Record the event to a custom log file
#
scheme tcpd & name connect & 
  (ip4src:addr 192.168.0.0/24 | ip4src:addr 127.0.0.1) & 
  ! %time wday sat,sun:
allow;
log file /usr/local/var/log/idsa/tcp-wrapper, custom "whitelist: %{ip4src}->%{portdst}^J"

# rule 2: Otherwise (weekends, external IP) seek operator approval. The operator runs 
#           idsaguardtty /root/tcp_approve
#         if he approves the request within 5 seconds access is granted, 
#         otherwise (operator not available, timeout) the request is denied
#
scheme tcpd & name connect & %interactive /root/tcp_approve 5 failclosed:
allow;
log file /usr/local/var/log/idsa/tcp-wrapper, custom "manual:    %{ip4src}->%{portdst}^J"

# rule 3: If the remote host isn't on the whitelist or the human operator
#         does not approve it, drop the incomming connection
#
scheme tcpd & name connect:
deny;
log file /usr/local/var/log/idsa/tcp-wrapper, custom "fail:      %{ip4src}->%{portdst}^J"

#################################################################################
# PAM rules 4-6. Note that not all services use PAM, and that these rules
# only apply to remote access by services running as root, not to local
# logins on a getty.

# rule 4: Allow localhost and trusted.example.com to always log in.
#         Also allow the last 64 hosts which have been previously approved.
#         Previously approved hosts are stored in /usr/local/var/log/idsa/pam-known
#         between reboots. 
scheme pam & uid root & name authenticate & pam_source:string pam_rhost & (
  pam_rhost:string localhost | pam_rhost:string trusted.example.com | 
  %keep pam_rhost:string known_hosts, size 64, file /usr/local/var/log/idsa/pam-known
):
# action: allow and log
allow;
log file /usr/local/var/log/idsa/pam-interactive-allowed, format xml

# rule 5: If rule 4 does not get triggered ask a human for permission to 
#         let the user in. To approve the request run :
#           idsaguardtty /root/pam_approve
#         If the request is not approved within 7.5 seconds or nobody 
#         is connected then deny the request (allow would be failopen)
#
scheme pam & uid root & name authenticate & pam_source:string pam_rhost & 
  %interactive /root/pam_approve 7.5 failclosed:
allow;
# action: keep the approved hostname, allow it and log
keep pam_rhost:string known_hosts;
allow;
log file /usr/local/var/log/idsa/pam-interactive-allowed, format xml

# rule 6: Failure - deny access to the remote user and log this
#
scheme pam & uid root & name authenticate & pam_source:string pam_rhost:
# action: deny and log
deny;
log file /usr/local/var/log/idsa/pam-interactive-denied, format ulm


#################################################################################

# rule 7: By default log everything to catch errors and misconfigurations,
#         rotating files after 200000 bytes
#
%true:
log file /usr/local/var/log/idsa/default, rotate 200000
