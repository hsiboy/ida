#########################################################################
# Example configuration file for idsad (format has changed for 0.91.x)
# This file contains the equivalent of firewall rules for applications
# such as Apache, PAM or TCP Wrappers.
#########################################################################

#########################################################################
#
# Syntax:
#
# Each rule consists of a rule head followed by a colon followed by
# a list of actions, where actions are separated (not terminated)
# by a semi-colon. Newlines are ignored.
#
# Tests:
#
# In the rule head use "&" as AND, "|" as OR and "!" as NOT
# to compose tests. The default test is to match a named
# attribute to a value. For example "scheme foo" will match
# an event if its scheme field is foo. For fields which 
# are not common to all events use ":typename" to specify a type.
# For example "bar:string baz" will match an event if it contains
# a field named bar of type string with value baz.
#
# Test modules are introduced by a "%", for example
# "% example2 4" will load the example2 module to return 
# true for every 4th event.
#
# Actions:
# 
# Actions can either be deny, allow, drop, continue or 
# an action module.
# 
# The most useful action module is "log" which will write
# an event to a file or subprocess. "log file /an/absolute/path"
# will write events to file, "log pipe "/an/executable -with -options""
# will write events to a subprocess. The default format is "internal"
#
#########################################################################

#########################################################################
# Syslog messages generated by idsasyslogd
#########################################################################

# Save unusual log messages. Unusual messages are those which haven't 
# been seen before, 64 known ones are kept
#
scheme syslog & ! %keep message:string known, size 64:
  log file /usr/local/var/log/idsa/syslog-unusual, format xml, rotate 100000;
  keep message:string known;
  continue

# Save confidential authorization system log messages to syslog-authpriv
# using the conventional syslog format. Writes are synchronous.
#
scheme syslog & facility:string authpriv & uid root: 
  log file /usr/local/var/log/idsa/syslog-authpriv, format syslog, sync

# Save sshd log messages (which are not authpriv) in a format
# vaguely resembling the universal logger format.
#
scheme syslog & service sshd & uid root:
  log file /usr/local/var/log/idsa/syslog-ssh, format ulm

# Messages generated by init in a custom format
#
#scheme syslog & pid 1: 
#  log file /usr/local/var/log/idsa/syslog-init, custom "%{time} init says: %{message}^J"

# Save syslog messages generated by root 
#
scheme syslog & uid root: 
  log file /usr/local/var/log/idsa/syslog-root, format syslog

# Save all other system log messages to /usr/local/var/log/idsa/syslog-all
# which is rotated automatically. This means a local user can not run a
# DoS against root logs
#
scheme syslog: 
  log file /usr/local/var/log/idsa/syslog-all, format syslog, rotate 1000000

#########################################################################
# Kernel messages generated by idsaklogd
#########################################################################

# Send kernel messages to windows_box using smbclient. 
# Smbclient is run as user nobody and messages are sent
# in batches spanning 4 seconds.
# 
#scheme klog:
#  log pipe "/usr/local/sbin/idsapipe -f xml -i nobody -l -T 4 /usr/bin/smbclient -M windows_box"

# Obsolete warnings by kernel (messages which contain the string obsolete)
#
#scheme klog & %regex message obsolete
#  log file /usr/local/var/log/idsa/klog-obsolete-warnings, format syslog

#########################################################################
# Remote syslog message reception using idsarlogd             
#########################################################################

# Example of per host logging for remote syslog messages
#
#scheme rlog & host ftp.example.com: log file /usr/local/var/log/idsa/ftp-example-com
#scheme rlog & host www.example.com: log file /usr/local/var/log/idsa/www-example-com

# Log all remote syslog messages to the same file, and rotate them
#
#scheme rlog: log file /usr/local/var/log/idsa/remote-syslog, format syslog, rotate 500000

#########################################################################
# Messages from TCP SYN logger idsatcplogd
#########################################################################

# Print a warning if we receive an unusual connection to our ssh server.
# Known hosts are kept in /var/state/idsa/ssh between restarts
#
#service tcplog & portdst:port tcp/ssh & ! %keep ip4src:addr ssh, size 32, file /var/state/idsa/ssh :
#  keep ip4src:addr ssh;
#  log file /usr/local/var/log/idsa/warnings, 
#    custom "ssh connection from %{ip4src}. This host does not normally connect to our ssh service^J" ;
#  continue

service tcplog:
  log file /usr/local/var/log/idsa/tcplog-packet, format csv, rotate 100000

# Upload a rule into the tcp logger, saving us the cost to connect to idsad
# For longer rules use the word autofile and pass the name of a file. Also
# make sure that the tcplogger has sufficient rights to write the log file. 
# For a prefilter use the keywords prerule or prefile. Applications have
# to call idsa_open() with the IDSA_F_UPLOAD flag for uploading to work.
#
# service tcplog:
#   send autorule:string "%true:log file /usr/local/var/log/idsa/tcplog, format csv, rotate 8000000"
#

#########################################################################
# Messages from tcpwrapper replacement idsatcpd
#########################################################################

# Restrict telnet access to machines on a private network
#
scheme tcpd & name connect & portdst:port tcp/telnet & ! ip4src:addr 192.168.1.0/24 :
  deny; 
#
# Musical mode: play an alarm (for 10 seconds) if somebody on the
# outside tries to telnet in
#  log pipe "/usr/local/sbin/idsaexec -nst 10 mpg123 /usr/local/aucons/Klaxon.mp3" ;
#
# BOFH mode: add firewall rule blocking out all access.
# Not recommended because of DoS risk
#
#  log pipe "/usr/local/sbin/idsaexec -st 2 /sbin/ipchains -A input -p all -s %ip4src -j DENY" ;
#
  log file /usr/local/var/log/idsa/tcpd-deny
scheme tcpd & name connect:
  allow; 
  log file /usr/local/var/log/idsa/tcpd-allow

#########################################################################
# Internal IDS/A messages
#########################################################################

# Simple ACL: user drevil is not allowed to connect
#
#scheme idsa & name connect & client_uid:uid drevil: 
#  drop ; 
#  log file /usr/local/var/log/idsa/dropped

# BOFH mode: processes owned by drevil get killed if 
# they try to connect. idsaexec is synchronous (-s) meaning
# that it never starts more than one instance of kill 
# and that it waits for 2 seconds (-t) for kill to complete.
# idsaexec runs with the privs at which idsad was started.
# Note that no shell expansion takes place in idsaexec, 
# the %variables are the only substitutions made.
#
#scheme idsa & name connect & client_uid:uid drevil: 
#  log file /usr/local/var/log/idsa/killed ; 
#  log pipe "/usr/local/sbin/idsaexec -st 2 kill -9 %client_pid"

# Just log internal messages
#
scheme idsa: log file /usr/local/var/log/idsa/idsa

#########################################################################
# Apache access control using mod_idsa
#########################################################################

# Deny access to users attempting to run CGI scripts other
# than test-cgi or printenv and write the request to every
# user currently logged on
#
#service apache & name request & ! (
#    filename:file /usr/local/apache/cgi-bin/printenv |
#    filename:file /usr/local/apache/cgi-bin/test-cgi
#  ) & filename:file /usr/local/apache/cgi-bin/ :
#  deny;
#  log pipe "/usr/local/sbin/idsapipe -f ulm -i nobody -l -T 4 /usr/bin/wall";
#  continue

# Prevent robots from downloading files ending in mp3
# The variable robot has space for 128 IPs (FIFO) which get
# written out to /var/state/idsa/robot whenever 
# idsad is stopped.
#
#service apache & %keep ip4src:addr robot, size 128, file /var/state/idsa/robot & %regex file "mp3$" :
#  log file /usr/local/var/log/idsa/apache-denied;
#  deny;
#  continue
#service apache & filename:file /usr/local/apache/htdocs/robots.txt & ! %regex agent wget :
#  keep ip4src:addr robot;
#  continue

service apache:
   log file /usr/local/var/log/idsa/apache, format ulm, rotate 2000000

#########################################################################
# exec*() preload wrapper to log user commands
#########################################################################

# Snoopy intercepts execs. Using idsaexec in these rules is 
# not wise as this may result in cycles.

# Use the simple/sequence anomaly detection module to find strange 
# command sequences issued by marc (with sequences at most 7 items long)
#
#service snoopy & uid marc & %sad filename:file odd, history 7 :
#  log file /usr/local/var/log/idsa/snoopy-unusual, format ulm;
#  continue

# Log all execs made by root in snoopy-root
#
#service snoopy & uid root:
#  log file /usr/local/var/log/idsa/snoopy-root, format ulm

# Try to prevent user nobody from executing su or traceroute
#
#service snoopy & uid nobody & 
#(filename:file /bin/su | filename:file /usr/sbin/traceroute):
#  deny;
#  continue

# Log all other execs and rotate them quickly
#
#service snoopy:
#  log file /usr/local/var/log/idsa/snoopy-others, format ulm, rotate 100000

#########################################################################
# Pluggable authentication module (PAM) access rules
#########################################################################

# Slacker mode: On weekends don't allow root logins
#
#scheme pam & %time wday saturday, sunday & pam_uid:uid root: 
#  deny;
#  log file /usr/local/var/log/idsa/pam-weekend, format xml

# Don't allow user nobody to run su, and make him wait for 15 seconds
#
#scheme pam & service su & uid nobody: 
#  deny;
#  log file /usr/local/var/log/idsa/pam-nobody, format xml;
#  send sleep 15

# Deny non-root logins on the first tty to counter 
# trojaned login screens - a normal user could log into
# the console and plant an application which pretends
# to be the login screen and capture passwords
#
#scheme pam & service login & pam_tty:string tty1 & ! pam_uid:uid root: 
#  deny;
#  log file /usr/local/var/log/idsa/pam-root-console, format xml;
#  send sleep 15

# Log, but don't override PAM
#
scheme pam: 
  log file /usr/local/var/log/idsa/pam, format xml

#########################################################################
# Example of mod_pipe and idsaguile to run scheme tests
#########################################################################

# Example of a guile script which decides if an event should be allowed
# Note that guile needs support files which will have to be copied into 
# the chroot environment if you wish to use the -r option for idsaguile.
# By default idsaguile will disallow spawning of subprocesses, use -f 
# option to enable forks.
#
#%pipe "/usr/local/sbin/idsaguile /usr/local/share/idsa/example-log.scm", 
#timeout 5, failopen :
#  allow; log file /usr/local/var/log/idsa/guile, format tulm

#########################################################################
# Example of mod_true to log everything else
#########################################################################

#%true:
#  log file /usr/local/var/log/idsa/default, format tulm

#########################################################################
# Stab at an IDMEF output. Prototype, proof of concept. Needs more work
#########################################################################

#%true:
#  log file /usr/local/var/log/idsa/idmef, custom "^J<IDMEF-Message version=\"0.5\">^J  <Alert ident=\"%{pid}%{time}%{#}\">^J    <Analyzer analyzerid=\"%{pid}-idsa-%{host:2}\">^J      <Process>^J        <name>idsad</name>^J        <pid>%{pid}</pid>^J      </Process>^J    </Analyzer>^J    <CreateTime ntpstamp=\"%{time:104}\">^J      %{time:103}^J    </CreateTime>^J    <Classification origin=\"vendor-specific\">^J      <name>%{name:2}.%{scheme:2}</name>^J      <url>http://jade.cs.uct.ac.za/idsa/</url>^J    </Classification>^J    <AdditionalData type=\"xml\">^J      <idsa:event>%{>}^J        <idsa:%{*} idsa:type=\"%{+}\">%{:2}</idsa:%{*}>%{<}^J      </idsa:event>^J    </AdditionalData>^J  </Alert>^J</IDMEF-Message>^J"
